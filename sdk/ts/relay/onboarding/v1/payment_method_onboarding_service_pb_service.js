/* eslint-disable */
/*Generated by GenDocu.com*/
// package: relay.onboarding.v1
// file: relay/onboarding/v1/payment_method_onboarding_service.proto

var relay_onboarding_v1_payment_method_onboarding_service_pb = require("../../../relay/onboarding/v1/payment_method_onboarding_service_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var PaymentMethodOnboarding = (function () {
  function PaymentMethodOnboarding() {}
  PaymentMethodOnboarding.serviceName = "relay.onboarding.v1.PaymentMethodOnboarding";
  return PaymentMethodOnboarding;
}());

PaymentMethodOnboarding.Initialize = {
  methodName: "Initialize",
  service: PaymentMethodOnboarding,
  requestStream: false,
  responseStream: false,
  requestType: relay_onboarding_v1_payment_method_onboarding_service_pb.InitializeRequest,
  responseType: relay_onboarding_v1_payment_method_onboarding_service_pb.InitializeResponse
};

PaymentMethodOnboarding.Update = {
  methodName: "Update",
  service: PaymentMethodOnboarding,
  requestStream: false,
  responseStream: false,
  requestType: relay_onboarding_v1_payment_method_onboarding_service_pb.UpdateRequest,
  responseType: relay_onboarding_v1_payment_method_onboarding_service_pb.UpdateResponse
};

PaymentMethodOnboarding.Get = {
  methodName: "Get",
  service: PaymentMethodOnboarding,
  requestStream: false,
  responseStream: false,
  requestType: relay_onboarding_v1_payment_method_onboarding_service_pb.GetRequest,
  responseType: relay_onboarding_v1_payment_method_onboarding_service_pb.GetResponse
};

PaymentMethodOnboarding.New = {
  methodName: "New",
  service: PaymentMethodOnboarding,
  requestStream: false,
  responseStream: false,
  requestType: relay_onboarding_v1_payment_method_onboarding_service_pb.CompletelyNew,
  responseType: relay_onboarding_v1_payment_method_onboarding_service_pb.NewIndeed
};

PaymentMethodOnboarding.Nested = {
  methodName: "Nested",
  service: PaymentMethodOnboarding,
  requestStream: false,
  responseStream: false,
  requestType: relay_onboarding_v1_payment_method_onboarding_service_pb.TryNested,
  responseType: relay_onboarding_v1_payment_method_onboarding_service_pb.ResNested
};

exports.PaymentMethodOnboarding = PaymentMethodOnboarding;

function PaymentMethodOnboardingClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

PaymentMethodOnboardingClient.prototype.initialize = function initialize(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PaymentMethodOnboarding.Initialize, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

PaymentMethodOnboardingClient.prototype.update = function update(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PaymentMethodOnboarding.Update, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

PaymentMethodOnboardingClient.prototype.get = function get(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PaymentMethodOnboarding.Get, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

PaymentMethodOnboardingClient.prototype.new = function pb_new(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PaymentMethodOnboarding.New, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

PaymentMethodOnboardingClient.prototype.nested = function nested(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(PaymentMethodOnboarding.Nested, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.PaymentMethodOnboardingClient = PaymentMethodOnboardingClient;

