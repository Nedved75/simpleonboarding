/* eslint-disable */
/*Generated by GenDocu.com*/
// package: relay.onboarding.v1.paymentmethods.ppro
// file: relay/onboarding/v1/paymentmethods/ppro.proto

import * as jspb from "google-protobuf";
import * as google_protobuf_timestamp_pb from "google-protobuf/google/protobuf/timestamp_pb";

export class InitializeRequestData extends jspb.Message {
  hasBusinessDetails(): boolean;
  clearBusinessDetails(): void;
  getBusinessDetails(): BusinessDetails | undefined;
  setBusinessDetails(value?: BusinessDetails): void;

  hasPaymentMethodInformation(): boolean;
  clearPaymentMethodInformation(): void;
  getPaymentMethodInformation(): PaymentMethodInformation | undefined;
  setPaymentMethodInformation(value?: PaymentMethodInformation): void;

  hasLegalEntity(): boolean;
  clearLegalEntity(): void;
  getLegalEntity(): LegalEntity | undefined;
  setLegalEntity(value?: LegalEntity): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InitializeRequestData.AsObject;
  static toObject(includeInstance: boolean, msg: InitializeRequestData): InitializeRequestData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: InitializeRequestData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InitializeRequestData;
  static deserializeBinaryFromReader(message: InitializeRequestData, reader: jspb.BinaryReader): InitializeRequestData;
}

export namespace InitializeRequestData {
  export type AsObject = {
    businessDetails?: BusinessDetails.AsObject,
    paymentMethodInformation?: PaymentMethodInformation.AsObject,
    legalEntity?: LegalEntity.AsObject,
  }
}

export class UpdateRequestData extends jspb.Message {
  hasBusinessDetails(): boolean;
  clearBusinessDetails(): void;
  getBusinessDetails(): BusinessDetails | undefined;
  setBusinessDetails(value?: BusinessDetails): void;

  hasLegalEntity(): boolean;
  clearLegalEntity(): void;
  getLegalEntity(): LegalEntity | undefined;
  setLegalEntity(value?: LegalEntity): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): UpdateRequestData.AsObject;
  static toObject(includeInstance: boolean, msg: UpdateRequestData): UpdateRequestData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: UpdateRequestData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): UpdateRequestData;
  static deserializeBinaryFromReader(message: UpdateRequestData, reader: jspb.BinaryReader): UpdateRequestData;
}

export namespace UpdateRequestData {
  export type AsObject = {
    businessDetails?: BusinessDetails.AsObject,
    legalEntity?: LegalEntity.AsObject,
  }
}

export class BusinessDetails extends jspb.Message {
  getMerchantCategoryCode(): string;
  setMerchantCategoryCode(value: string): void;

  getPaymentDescriptor(): string;
  setPaymentDescriptor(value: string): void;

  getTradeName(): string;
  setTradeName(value: string): void;

  clearWebsitesList(): void;
  getWebsitesList(): Array<string>;
  setWebsitesList(value: Array<string>): void;
  addWebsites(value: string, index?: number): string;

  hasMonthlyTransactions(): boolean;
  clearMonthlyTransactions(): void;
  getMonthlyTransactions(): MonthlyTransactions | undefined;
  setMonthlyTransactions(value?: MonthlyTransactions): void;

  getPhoneNumber(): string;
  setPhoneNumber(value: string): void;

  getEmailAddress(): string;
  setEmailAddress(value: string): void;

  hasIncorporationDate(): boolean;
  clearIncorporationDate(): void;
  getIncorporationDate(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setIncorporationDate(value?: google_protobuf_timestamp_pb.Timestamp): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BusinessDetails.AsObject;
  static toObject(includeInstance: boolean, msg: BusinessDetails): BusinessDetails.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BusinessDetails, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BusinessDetails;
  static deserializeBinaryFromReader(message: BusinessDetails, reader: jspb.BinaryReader): BusinessDetails;
}

export namespace BusinessDetails {
  export type AsObject = {
    merchantCategoryCode: string,
    paymentDescriptor: string,
    tradeName: string,
    websitesList: Array<string>,
    monthlyTransactions?: MonthlyTransactions.AsObject,
    phoneNumber: string,
    emailAddress: string,
    incorporationDate?: google_protobuf_timestamp_pb.Timestamp.AsObject,
  }
}

export class MonthlyTransactions extends jspb.Message {
  getCount(): string;
  setCount(value: string): void;

  getAverageValue(): string;
  setAverageValue(value: string): void;

  getCurrency(): string;
  setCurrency(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MonthlyTransactions.AsObject;
  static toObject(includeInstance: boolean, msg: MonthlyTransactions): MonthlyTransactions.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MonthlyTransactions, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MonthlyTransactions;
  static deserializeBinaryFromReader(message: MonthlyTransactions, reader: jspb.BinaryReader): MonthlyTransactions;
}

export namespace MonthlyTransactions {
  export type AsObject = {
    count: string,
    averageValue: string,
    currency: string,
  }
}

export class PaymentMethodInformation extends jspb.Message {
  hasCreditorResidence(): boolean;
  clearCreditorResidence(): void;
  getCreditorResidence(): Residence | undefined;
  setCreditorResidence(value?: Residence): void;

  getCreditorId(): string;
  setCreditorId(value: string): void;

  getCreditorName(): string;
  setCreditorName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PaymentMethodInformation.AsObject;
  static toObject(includeInstance: boolean, msg: PaymentMethodInformation): PaymentMethodInformation.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PaymentMethodInformation, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PaymentMethodInformation;
  static deserializeBinaryFromReader(message: PaymentMethodInformation, reader: jspb.BinaryReader): PaymentMethodInformation;
}

export namespace PaymentMethodInformation {
  export type AsObject = {
    creditorResidence?: Residence.AsObject,
    creditorId: string,
    creditorName: string,
  }
}

export class LegalEntity extends jspb.Message {
  hasPartnership(): boolean;
  clearPartnership(): void;
  getPartnership(): Partnership | undefined;
  setPartnership(value?: Partnership): void;

  hasIndividual(): boolean;
  clearIndividual(): void;
  getIndividual(): Individual | undefined;
  setIndividual(value?: Individual): void;

  hasOrganization(): boolean;
  clearOrganization(): void;
  getOrganization(): Organization | undefined;
  setOrganization(value?: Organization): void;

  hasNonProfitOrganization(): boolean;
  clearNonProfitOrganization(): void;
  getNonProfitOrganization(): NonprofitOrganization | undefined;
  setNonProfitOrganization(value?: NonprofitOrganization): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LegalEntity.AsObject;
  static toObject(includeInstance: boolean, msg: LegalEntity): LegalEntity.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: LegalEntity, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LegalEntity;
  static deserializeBinaryFromReader(message: LegalEntity, reader: jspb.BinaryReader): LegalEntity;
}

export namespace LegalEntity {
  export type AsObject = {
    partnership?: Partnership.AsObject,
    individual?: Individual.AsObject,
    organization?: Organization.AsObject,
    nonProfitOrganization?: NonprofitOrganization.AsObject,
  }
}

export class Partnership extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getRegistrationNumber(): string;
  setRegistrationNumber(value: string): void;

  hasResidence(): boolean;
  clearResidence(): void;
  getResidence(): Residence | undefined;
  setResidence(value?: Residence): void;

  clearPartnersList(): void;
  getPartnersList(): Array<Person>;
  setPartnersList(value: Array<Person>): void;
  addPartners(value?: Person, index?: number): Person;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Partnership.AsObject;
  static toObject(includeInstance: boolean, msg: Partnership): Partnership.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Partnership, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Partnership;
  static deserializeBinaryFromReader(message: Partnership, reader: jspb.BinaryReader): Partnership;
}

export namespace Partnership {
  export type AsObject = {
    name: string,
    registrationNumber: string,
    residence?: Residence.AsObject,
    partnersList: Array<Person.AsObject>,
  }
}

export class Name extends jspb.Message {
  getTitle(): string;
  setTitle(value: string): void;

  getFirstName(): string;
  setFirstName(value: string): void;

  getMiddleName(): string;
  setMiddleName(value: string): void;

  getLastName(): string;
  setLastName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Name.AsObject;
  static toObject(includeInstance: boolean, msg: Name): Name.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Name, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Name;
  static deserializeBinaryFromReader(message: Name, reader: jspb.BinaryReader): Name;
}

export namespace Name {
  export type AsObject = {
    title: string,
    firstName: string,
    middleName: string,
    lastName: string,
  }
}

export class Individual extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  hasResidence(): boolean;
  clearResidence(): void;
  getResidence(): Residence | undefined;
  setResidence(value?: Residence): void;

  hasPerson(): boolean;
  clearPerson(): void;
  getPerson(): Person | undefined;
  setPerson(value?: Person): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Individual.AsObject;
  static toObject(includeInstance: boolean, msg: Individual): Individual.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Individual, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Individual;
  static deserializeBinaryFromReader(message: Individual, reader: jspb.BinaryReader): Individual;
}

export namespace Individual {
  export type AsObject = {
    name: string,
    residence?: Residence.AsObject,
    person?: Person.AsObject,
  }
}

export class Organization extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getRegistrationNumber(): string;
  setRegistrationNumber(value: string): void;

  hasResidence(): boolean;
  clearResidence(): void;
  getResidence(): Residence | undefined;
  setResidence(value?: Residence): void;

  clearDirectorsList(): void;
  getDirectorsList(): Array<Person>;
  setDirectorsList(value: Array<Person>): void;
  addDirectors(value?: Person, index?: number): Person;

  clearUltimateBeneficialOwnersList(): void;
  getUltimateBeneficialOwnersList(): Array<Person>;
  setUltimateBeneficialOwnersList(value: Array<Person>): void;
  addUltimateBeneficialOwners(value?: Person, index?: number): Person;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Organization.AsObject;
  static toObject(includeInstance: boolean, msg: Organization): Organization.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Organization, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Organization;
  static deserializeBinaryFromReader(message: Organization, reader: jspb.BinaryReader): Organization;
}

export namespace Organization {
  export type AsObject = {
    name: string,
    registrationNumber: string,
    residence?: Residence.AsObject,
    directorsList: Array<Person.AsObject>,
    ultimateBeneficialOwnersList: Array<Person.AsObject>,
  }
}

export class NonprofitOrganization extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getRegistrationNumber(): string;
  setRegistrationNumber(value: string): void;

  hasResidence(): boolean;
  clearResidence(): void;
  getResidence(): Residence | undefined;
  setResidence(value?: Residence): void;

  clearDirectorsList(): void;
  getDirectorsList(): Array<Person>;
  setDirectorsList(value: Array<Person>): void;
  addDirectors(value?: Person, index?: number): Person;

  clearUltimateBeneficialOwnersList(): void;
  getUltimateBeneficialOwnersList(): Array<Person>;
  setUltimateBeneficialOwnersList(value: Array<Person>): void;
  addUltimateBeneficialOwners(value?: Person, index?: number): Person;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): NonprofitOrganization.AsObject;
  static toObject(includeInstance: boolean, msg: NonprofitOrganization): NonprofitOrganization.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: NonprofitOrganization, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): NonprofitOrganization;
  static deserializeBinaryFromReader(message: NonprofitOrganization, reader: jspb.BinaryReader): NonprofitOrganization;
}

export namespace NonprofitOrganization {
  export type AsObject = {
    name: string,
    registrationNumber: string,
    residence?: Residence.AsObject,
    directorsList: Array<Person.AsObject>,
    ultimateBeneficialOwnersList: Array<Person.AsObject>,
  }
}

export class Person extends jspb.Message {
  hasName(): boolean;
  clearName(): void;
  getName(): Name | undefined;
  setName(value?: Name): void;

  hasDateOfBirth(): boolean;
  clearDateOfBirth(): void;
  getDateOfBirth(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setDateOfBirth(value?: google_protobuf_timestamp_pb.Timestamp): void;

  hasResidence(): boolean;
  clearResidence(): void;
  getResidence(): Residence | undefined;
  setResidence(value?: Residence): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Person.AsObject;
  static toObject(includeInstance: boolean, msg: Person): Person.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Person, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Person;
  static deserializeBinaryFromReader(message: Person, reader: jspb.BinaryReader): Person;
}

export namespace Person {
  export type AsObject = {
    name?: Name.AsObject,
    dateOfBirth?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    residence?: Residence.AsObject,
  }
}

export class Residence extends jspb.Message {
  clearAddressList(): void;
  getAddressList(): Array<string>;
  setAddressList(value: Array<string>): void;
  addAddress(value: string, index?: number): string;

  getZipCode(): string;
  setZipCode(value: string): void;

  getCity(): string;
  setCity(value: string): void;

  getState(): string;
  setState(value: string): void;

  getCountry(): string;
  setCountry(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Residence.AsObject;
  static toObject(includeInstance: boolean, msg: Residence): Residence.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Residence, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Residence;
  static deserializeBinaryFromReader(message: Residence, reader: jspb.BinaryReader): Residence;
}

export namespace Residence {
  export type AsObject = {
    addressList: Array<string>,
    zipCode: string,
    city: string,
    state: string,
    country: string,
  }
}

