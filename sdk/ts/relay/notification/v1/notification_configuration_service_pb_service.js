/* eslint-disable */
/*Generated by GenDocu.com*/
// package: relay.notification.v1
// file: relay/notification/v1/notification_configuration_service.proto

var relay_notification_v1_notification_configuration_service_pb = require("../../../relay/notification/v1/notification_configuration_service_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var NotificationConfiguration = (function () {
  function NotificationConfiguration() {}
  NotificationConfiguration.serviceName = "relay.notification.v1.NotificationConfiguration";
  return NotificationConfiguration;
}());

NotificationConfiguration.CreateWebhookConfiguration = {
  methodName: "CreateWebhookConfiguration",
  service: NotificationConfiguration,
  requestStream: false,
  responseStream: false,
  requestType: relay_notification_v1_notification_configuration_service_pb.CreateWebhookConfigurationRequest,
  responseType: relay_notification_v1_notification_configuration_service_pb.CreateWebhookConfigurationResponse
};

NotificationConfiguration.Get = {
  methodName: "Get",
  service: NotificationConfiguration,
  requestStream: false,
  responseStream: false,
  requestType: relay_notification_v1_notification_configuration_service_pb.GetConfigurationRequest,
  responseType: relay_notification_v1_notification_configuration_service_pb.GetConfigurationResponse
};

NotificationConfiguration.Delete = {
  methodName: "Delete",
  service: NotificationConfiguration,
  requestStream: false,
  responseStream: false,
  requestType: relay_notification_v1_notification_configuration_service_pb.DeleteConfigurationRequest,
  responseType: relay_notification_v1_notification_configuration_service_pb.DeleteConfigurationResponse
};

exports.NotificationConfiguration = NotificationConfiguration;

function NotificationConfigurationClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

NotificationConfigurationClient.prototype.createWebhookConfiguration = function createWebhookConfiguration(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NotificationConfiguration.CreateWebhookConfiguration, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

NotificationConfigurationClient.prototype.get = function get(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NotificationConfiguration.Get, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

NotificationConfigurationClient.prototype.delete = function pb_delete(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(NotificationConfiguration.Delete, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.NotificationConfigurationClient = NotificationConfigurationClient;

