/* eslint-disable */
/*Generated by GenDocu.com*/
// package: relay.notification.v1
// file: relay/notification/v1/notification_configuration_service.proto

import * as relay_notification_v1_notification_configuration_service_pb from "../../../relay/notification/v1/notification_configuration_service_pb";
import {grpc} from "@improbable-eng/grpc-web";

type NotificationConfigurationCreateWebhookConfiguration = {
  readonly methodName: string;
  readonly service: typeof NotificationConfiguration;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof relay_notification_v1_notification_configuration_service_pb.CreateWebhookConfigurationRequest;
  readonly responseType: typeof relay_notification_v1_notification_configuration_service_pb.CreateWebhookConfigurationResponse;
};

type NotificationConfigurationGet = {
  readonly methodName: string;
  readonly service: typeof NotificationConfiguration;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof relay_notification_v1_notification_configuration_service_pb.GetConfigurationRequest;
  readonly responseType: typeof relay_notification_v1_notification_configuration_service_pb.GetConfigurationResponse;
};

type NotificationConfigurationDelete = {
  readonly methodName: string;
  readonly service: typeof NotificationConfiguration;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof relay_notification_v1_notification_configuration_service_pb.DeleteConfigurationRequest;
  readonly responseType: typeof relay_notification_v1_notification_configuration_service_pb.DeleteConfigurationResponse;
};

export class NotificationConfiguration {
  static readonly serviceName: string;
  static readonly CreateWebhookConfiguration: NotificationConfigurationCreateWebhookConfiguration;
  static readonly Get: NotificationConfigurationGet;
  static readonly Delete: NotificationConfigurationDelete;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class NotificationConfigurationClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  createWebhookConfiguration(
    requestMessage: relay_notification_v1_notification_configuration_service_pb.CreateWebhookConfigurationRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: relay_notification_v1_notification_configuration_service_pb.CreateWebhookConfigurationResponse|null) => void
  ): UnaryResponse;
  createWebhookConfiguration(
    requestMessage: relay_notification_v1_notification_configuration_service_pb.CreateWebhookConfigurationRequest,
    callback: (error: ServiceError|null, responseMessage: relay_notification_v1_notification_configuration_service_pb.CreateWebhookConfigurationResponse|null) => void
  ): UnaryResponse;
  get(
    requestMessage: relay_notification_v1_notification_configuration_service_pb.GetConfigurationRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: relay_notification_v1_notification_configuration_service_pb.GetConfigurationResponse|null) => void
  ): UnaryResponse;
  get(
    requestMessage: relay_notification_v1_notification_configuration_service_pb.GetConfigurationRequest,
    callback: (error: ServiceError|null, responseMessage: relay_notification_v1_notification_configuration_service_pb.GetConfigurationResponse|null) => void
  ): UnaryResponse;
  delete(
    requestMessage: relay_notification_v1_notification_configuration_service_pb.DeleteConfigurationRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: relay_notification_v1_notification_configuration_service_pb.DeleteConfigurationResponse|null) => void
  ): UnaryResponse;
  delete(
    requestMessage: relay_notification_v1_notification_configuration_service_pb.DeleteConfigurationRequest,
    callback: (error: ServiceError|null, responseMessage: relay_notification_v1_notification_configuration_service_pb.DeleteConfigurationResponse|null) => void
  ): UnaryResponse;
}

