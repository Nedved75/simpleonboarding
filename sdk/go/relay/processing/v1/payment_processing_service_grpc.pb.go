// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentProcessingClient is the client API for PaymentProcessing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentProcessingClient interface {
	Charge(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*ChargeResponse, error)
	Refund(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*RefundResponse, error)
	GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error)
	GetOperationsSummary(ctx context.Context, in *GetOperationsSummaryRequest, opts ...grpc.CallOption) (*GetOperationsSummaryResponse, error)
}

type paymentProcessingClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentProcessingClient(cc grpc.ClientConnInterface) PaymentProcessingClient {
	return &paymentProcessingClient{cc}
}

func (c *paymentProcessingClient) Charge(ctx context.Context, in *ChargeRequest, opts ...grpc.CallOption) (*ChargeResponse, error) {
	out := new(ChargeResponse)
	err := c.cc.Invoke(ctx, "/relay.processing.v1.PaymentProcessing/Charge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentProcessingClient) Refund(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*RefundResponse, error) {
	out := new(RefundResponse)
	err := c.cc.Invoke(ctx, "/relay.processing.v1.PaymentProcessing/Refund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentProcessingClient) GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error) {
	out := new(GetSummaryResponse)
	err := c.cc.Invoke(ctx, "/relay.processing.v1.PaymentProcessing/GetSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentProcessingClient) GetOperationsSummary(ctx context.Context, in *GetOperationsSummaryRequest, opts ...grpc.CallOption) (*GetOperationsSummaryResponse, error) {
	out := new(GetOperationsSummaryResponse)
	err := c.cc.Invoke(ctx, "/relay.processing.v1.PaymentProcessing/GetOperationsSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentProcessingServer is the server API for PaymentProcessing service.
// All implementations must embed UnimplementedPaymentProcessingServer
// for forward compatibility
type PaymentProcessingServer interface {
	Charge(context.Context, *ChargeRequest) (*ChargeResponse, error)
	Refund(context.Context, *RefundRequest) (*RefundResponse, error)
	GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error)
	GetOperationsSummary(context.Context, *GetOperationsSummaryRequest) (*GetOperationsSummaryResponse, error)
	mustEmbedUnimplementedPaymentProcessingServer()
}

// UnimplementedPaymentProcessingServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentProcessingServer struct {
}

func (UnimplementedPaymentProcessingServer) Charge(context.Context, *ChargeRequest) (*ChargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Charge not implemented")
}
func (UnimplementedPaymentProcessingServer) Refund(context.Context, *RefundRequest) (*RefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refund not implemented")
}
func (UnimplementedPaymentProcessingServer) GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (UnimplementedPaymentProcessingServer) GetOperationsSummary(context.Context, *GetOperationsSummaryRequest) (*GetOperationsSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationsSummary not implemented")
}
func (UnimplementedPaymentProcessingServer) mustEmbedUnimplementedPaymentProcessingServer() {}

// UnsafePaymentProcessingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentProcessingServer will
// result in compilation errors.
type UnsafePaymentProcessingServer interface {
	mustEmbedUnimplementedPaymentProcessingServer()
}

func RegisterPaymentProcessingServer(s grpc.ServiceRegistrar, srv PaymentProcessingServer) {
	s.RegisterService(&PaymentProcessing_ServiceDesc, srv)
}

func _PaymentProcessing_Charge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentProcessingServer).Charge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.processing.v1.PaymentProcessing/Charge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentProcessingServer).Charge(ctx, req.(*ChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentProcessing_Refund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentProcessingServer).Refund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.processing.v1.PaymentProcessing/Refund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentProcessingServer).Refund(ctx, req.(*RefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentProcessing_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentProcessingServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.processing.v1.PaymentProcessing/GetSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentProcessingServer).GetSummary(ctx, req.(*GetSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentProcessing_GetOperationsSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationsSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentProcessingServer).GetOperationsSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.processing.v1.PaymentProcessing/GetOperationsSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentProcessingServer).GetOperationsSummary(ctx, req.(*GetOperationsSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentProcessing_ServiceDesc is the grpc.ServiceDesc for PaymentProcessing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentProcessing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relay.processing.v1.PaymentProcessing",
	HandlerType: (*PaymentProcessingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Charge",
			Handler:    _PaymentProcessing_Charge_Handler,
		},
		{
			MethodName: "Refund",
			Handler:    _PaymentProcessing_Refund_Handler,
		},
		{
			MethodName: "GetSummary",
			Handler:    _PaymentProcessing_GetSummary_Handler,
		},
		{
			MethodName: "GetOperationsSummary",
			Handler:    _PaymentProcessing_GetOperationsSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relay/processing/v1/payment_processing_service.proto",
}
