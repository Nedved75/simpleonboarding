// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotificationConfigurationClient is the client API for NotificationConfiguration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationConfigurationClient interface {
	CreateWebhookConfiguration(ctx context.Context, in *CreateWebhookConfigurationRequest, opts ...grpc.CallOption) (*CreateWebhookConfigurationResponse, error)
	Get(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (*GetConfigurationResponse, error)
	Delete(ctx context.Context, in *DeleteConfigurationRequest, opts ...grpc.CallOption) (*DeleteConfigurationResponse, error)
}

type notificationConfigurationClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationConfigurationClient(cc grpc.ClientConnInterface) NotificationConfigurationClient {
	return &notificationConfigurationClient{cc}
}

func (c *notificationConfigurationClient) CreateWebhookConfiguration(ctx context.Context, in *CreateWebhookConfigurationRequest, opts ...grpc.CallOption) (*CreateWebhookConfigurationResponse, error) {
	out := new(CreateWebhookConfigurationResponse)
	err := c.cc.Invoke(ctx, "/relay.notification.v1.NotificationConfiguration/CreateWebhookConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationConfigurationClient) Get(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (*GetConfigurationResponse, error) {
	out := new(GetConfigurationResponse)
	err := c.cc.Invoke(ctx, "/relay.notification.v1.NotificationConfiguration/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationConfigurationClient) Delete(ctx context.Context, in *DeleteConfigurationRequest, opts ...grpc.CallOption) (*DeleteConfigurationResponse, error) {
	out := new(DeleteConfigurationResponse)
	err := c.cc.Invoke(ctx, "/relay.notification.v1.NotificationConfiguration/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationConfigurationServer is the server API for NotificationConfiguration service.
// All implementations must embed UnimplementedNotificationConfigurationServer
// for forward compatibility
type NotificationConfigurationServer interface {
	CreateWebhookConfiguration(context.Context, *CreateWebhookConfigurationRequest) (*CreateWebhookConfigurationResponse, error)
	Get(context.Context, *GetConfigurationRequest) (*GetConfigurationResponse, error)
	Delete(context.Context, *DeleteConfigurationRequest) (*DeleteConfigurationResponse, error)
	mustEmbedUnimplementedNotificationConfigurationServer()
}

// UnimplementedNotificationConfigurationServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationConfigurationServer struct {
}

func (UnimplementedNotificationConfigurationServer) CreateWebhookConfiguration(context.Context, *CreateWebhookConfigurationRequest) (*CreateWebhookConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebhookConfiguration not implemented")
}
func (UnimplementedNotificationConfigurationServer) Get(context.Context, *GetConfigurationRequest) (*GetConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNotificationConfigurationServer) Delete(context.Context, *DeleteConfigurationRequest) (*DeleteConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNotificationConfigurationServer) mustEmbedUnimplementedNotificationConfigurationServer() {
}

// UnsafeNotificationConfigurationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationConfigurationServer will
// result in compilation errors.
type UnsafeNotificationConfigurationServer interface {
	mustEmbedUnimplementedNotificationConfigurationServer()
}

func RegisterNotificationConfigurationServer(s grpc.ServiceRegistrar, srv NotificationConfigurationServer) {
	s.RegisterService(&NotificationConfiguration_ServiceDesc, srv)
}

func _NotificationConfiguration_CreateWebhookConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebhookConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationConfigurationServer).CreateWebhookConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.notification.v1.NotificationConfiguration/CreateWebhookConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationConfigurationServer).CreateWebhookConfiguration(ctx, req.(*CreateWebhookConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationConfiguration_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationConfigurationServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.notification.v1.NotificationConfiguration/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationConfigurationServer).Get(ctx, req.(*GetConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationConfiguration_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationConfigurationServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.notification.v1.NotificationConfiguration/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationConfigurationServer).Delete(ctx, req.(*DeleteConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationConfiguration_ServiceDesc is the grpc.ServiceDesc for NotificationConfiguration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationConfiguration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relay.notification.v1.NotificationConfiguration",
	HandlerType: (*NotificationConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWebhookConfiguration",
			Handler:    _NotificationConfiguration_CreateWebhookConfiguration_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _NotificationConfiguration_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NotificationConfiguration_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relay/notification/v1/notification_configuration_service.proto",
}
