// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentMethodOnboardingClient is the client API for PaymentMethodOnboarding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentMethodOnboardingClient interface {
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type paymentMethodOnboardingClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentMethodOnboardingClient(cc grpc.ClientConnInterface) PaymentMethodOnboardingClient {
	return &paymentMethodOnboardingClient{cc}
}

func (c *paymentMethodOnboardingClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, "/relay.onboarding.v1.PaymentMethodOnboarding/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodOnboardingClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/relay.onboarding.v1.PaymentMethodOnboarding/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentMethodOnboardingClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/relay.onboarding.v1.PaymentMethodOnboarding/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentMethodOnboardingServer is the server API for PaymentMethodOnboarding service.
// All implementations must embed UnimplementedPaymentMethodOnboardingServer
// for forward compatibility
type PaymentMethodOnboardingServer interface {
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedPaymentMethodOnboardingServer()
}

// UnimplementedPaymentMethodOnboardingServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentMethodOnboardingServer struct {
}

func (UnimplementedPaymentMethodOnboardingServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedPaymentMethodOnboardingServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPaymentMethodOnboardingServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPaymentMethodOnboardingServer) mustEmbedUnimplementedPaymentMethodOnboardingServer() {
}

// UnsafePaymentMethodOnboardingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentMethodOnboardingServer will
// result in compilation errors.
type UnsafePaymentMethodOnboardingServer interface {
	mustEmbedUnimplementedPaymentMethodOnboardingServer()
}

func RegisterPaymentMethodOnboardingServer(s grpc.ServiceRegistrar, srv PaymentMethodOnboardingServer) {
	s.RegisterService(&PaymentMethodOnboarding_ServiceDesc, srv)
}

func _PaymentMethodOnboarding_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMethodOnboardingServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.onboarding.v1.PaymentMethodOnboarding/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMethodOnboardingServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMethodOnboarding_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMethodOnboardingServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.onboarding.v1.PaymentMethodOnboarding/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMethodOnboardingServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentMethodOnboarding_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentMethodOnboardingServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relay.onboarding.v1.PaymentMethodOnboarding/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentMethodOnboardingServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentMethodOnboarding_ServiceDesc is the grpc.ServiceDesc for PaymentMethodOnboarding service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentMethodOnboarding_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relay.onboarding.v1.PaymentMethodOnboarding",
	HandlerType: (*PaymentMethodOnboardingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _PaymentMethodOnboarding_Initialize_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PaymentMethodOnboarding_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PaymentMethodOnboarding_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relay/onboarding/v1/payment_method_onboarding_service.proto",
}
